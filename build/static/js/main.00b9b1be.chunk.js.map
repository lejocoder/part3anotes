{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","baseUrl","services_notes","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","_useState","useState","notes","_useState2","Object","slicedToArray","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","notesToShow","filter","useEffect","noteService","initialNotes","components_Notification","class","map","components_Note","key","find","n","changedNote","objectSpread","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","components_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.00b9b1be.chunk.js","sourcesContent":["// because this is a recact-component, we must import React\nimport React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important\n      ? 'make not important' : 'make important'\n    // if important have button say make not important\n    // if not important have button say make important\n    return (\n      <li className = 'note'>\n        {note.content} \n        <button onClick={toggleImportance}>{label}</button>\n      </li>\n    // onClick will have a function that will execute\n    )\n  }\n\nexport default Note","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { \n  getAll, \n  create, \n  update \n}\n\n// ^ current note for the exports.\n// the labels to the left of the semi-colon are they keys \n// while the ones to the right are the variables defined.\n\n// since names and variables are the came we can simplify it","import React from 'react'\nconst Notification = ({ message }) => {\n  if (message === \"\") {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import React from 'react'\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n    </div> \n  )\n}\n\nexport default Footer","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n// part 2d notes\nconst App = (props) => {\n    const [notes, setNotes] = useState(props.notes)\n    const [newNote, setNewNote] = useState(\n        'a new note...'\n      ) \n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState('')\n    // ternary operator\n    const notesToShow = showAll\n      ? notes\n      : notes.filter(note => note.important === true) // if true shoe all notes\n      // false show the notes that are important (important === true)\n    // could just use note.important since we dont really need the === true\n    // because note.imrportant is bool itself\n    useEffect(() => {\n      noteService      \n      .getAll()      \n      .then(initialNotes => {        \n        setNotes(initialNotes)   \n      })  \n    }, [])\n    const toggleImportanceOf = id => {\n      const note = notes.find(n => n.id === id)\n      const changedNote = { ...note, important: !note.important }\n  \n      noteService\n        .update(changedNote).then(returnedNote => {\n          setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n        })\n        .catch(error => {\n          setErrorMessage(          \n            `Note '${note.content}' was already removed from server`\n            )        \n            setTimeout(() => {          \n              setErrorMessage(null)        }, \n              5000)        \n            setNotes(notes.filter(n => n.id !== id))\n        })\n    }\n    // first line defines the unique url for each note resrouce\n    // based on its id. \n\n    // the array find method is used to find the ntoe we want\n    // to modify, and we then assign it to the note variable\n\n    // third lne feautres a object spread which hasnt been\n    // standardized as a part of JS language specs\n    // inpractive {..note} creates a new object with copies all \n    // properties of OG note, then we add a change to important,\n    // which would be important: true. changedNote\n    // is a shallow copy!, meaning values of new\n    // object are same as old ones\n    \n    // then we use PUT request to backend where is will replace\n    // the ol object with map. for each note if note.id is not \n    // the id we are looking for use the original note, if it is\n    // then replace it with the note we have just created.\n    const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}    />\n    )\n\n    const addNote = (event) => {\n      event.preventDefault()\n      const noteObject = {\n        content: newNote,\n        date: new Date().toISOString(),\n        important: Math.random() > 0.5\n      }\n  \n      noteService      \n      .create(noteObject)      \n      .then(returnedNote => {        \n        setNotes(notes.concat(returnedNote))     \n        setNewNote('')      \n      })  \n    }\n  \n    // concat does not chage the components OG state but return \n    // a new copy of the list\n\n\n    // The event handler is called every time a change occurs \n    // in the input element. The event handler function receives \n    // the event object as its event parameter:\n    const handleNoteChange = (event) => {\n        console.log(event.target.value)\n        setNewNote(event.target.value)\n      }\n    // button setSHowAll makes it so that we can revert form important\n    // === true and those that are important and are not important\n    return (\n      <div>\n        <h1>Notes</h1>\n        <Notification class = \"error\" message={errorMessage} />\n        <div>\n            <button onClick={() => setShowAll(!showAll)}> \n            show {showAll ? 'important' : 'all' }\n            </button>\n        </div>\n        <ul>\n          {rows()}\n        </ul>\n        <form onSubmit={addNote}>\n            <input \n                value = {newNote}\n                onChange = {handleNoteChange}\n            />\n            <button type=\"submit\">save</button>\n        </form>\n        <Footer />\n      </div>\n    )\n  }\nexport default App\n\n// summary: we refer to individual data objects such as the notes\n// in the application, as resouces. every recsource has a unqiue\n// address associated with it- its URL.\n\n// resources are fetched from server wiht http get requests\n// http post request to the ntoes URL according to the REST convention\n// that the json-server asheres to. dara for new note resource\n// is ssent in the body of the request\n\n// json-server requires all data to be sent in JSON format\n// means in practice data must be correctly formatted \n\n//3b: so when we first do this and try to interact with our new \n// backend it complains about CORS\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only Javascript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n]\n\nReactDOM.render(\n  <App notes={notes} />,\n  document.getElementById('root')\n)"],"sourceRoot":""}